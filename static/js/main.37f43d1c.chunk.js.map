{"version":3,"sources":["components/Menu.tsx","components/App.tsx","components/ScrollToTop.tsx","serviceWorker.ts","index.tsx","components/Utils/DomainLink.tsx","components/Utils/ErrorBoundary.tsx","components/Utils/ErrorMessage.tsx","components/Utils/Loading.tsx","components/Utils/NewsLink.tsx","components/Utils/UserLink.tsx"],"names":["TopMenu","Menu","attached","className","as","Container","text","Item","header","to","position","LoadableNewsPage","React","LoadableCommentPage","LoadableUserPage","LoadableNotFoundPage","App","style","marginTop","fallback","path","exact","component","Divider","textAlign","role","aria-label","href","ScrollToTop","prevProps","this","props","location","window","scrollTo","children","Component","withRouter","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","createRoot","document","getElementById","render","basename","process","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","DomainLink","domain","target","rel","ErrorBoundary","hasError","Message","message","Loader","active","inline","PostSkeleton","Placeholder","Header","Line","Paragraph","CommentSkeleton","image","UserSkeleton","Card","Image","square","Content","length","extra","fluid","loadCommentsPage","NewsLink","news","url","startsWith","title","id","onMouseOver","loadUserPage","UserLink","user"],"mappings":"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","file":"static/js/main.37f43d1c.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Menu } from 'semantic-ui-react'\nimport { NavLink } from 'react-router-dom'\n\nexport default function TopMenu() {\n  return (\n    <Menu attached=\"top\" className=\"top-menu\" as=\"nav\">\n      <Container text>\n        <Menu.Item header>\n          <NavLink to=\"/\">Hacker News</NavLink>\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          <Menu.Item>\n            <NavLink to=\"/news\">news</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            <NavLink to=\"/newest\">newest</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            <NavLink to=\"/ask\">ask</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            <NavLink to=\"/show\">show</NavLink>\n          </Menu.Item>\n          <Menu.Item>\n            <NavLink to=\"/jobs\">jobs</NavLink>\n          </Menu.Item>\n        </Menu.Menu>\n      </Container>\n    </Menu>\n  )\n}\n","import * as React from 'react'\nimport { Route, Switch } from 'react-router'\nimport { Container, Divider } from 'semantic-ui-react'\nimport './App.css'\nimport TopMenu from './Menu'\nimport { Loading } from './Utils'\n\nconst LoadableNewsPage = React.lazy(() => import('./News'))\nconst LoadableCommentPage = React.lazy(() => import('./Comments'))\nconst LoadableUserPage = React.lazy(() => import('./User'))\nconst LoadableNotFoundPage = React.lazy(() => import('./Utils/NotFound'))\n\nconst App = () => (\n  <>\n    <TopMenu />\n    <Container text style={{ marginTop: '1em' }} as=\"main\">\n      <React.Suspense fallback={<Loading />}>\n        <Switch>\n          <Route path=\"/\" exact component={LoadableNewsPage} />\n          <Route path=\"/comments/:id\" component={LoadableCommentPage} />\n          <Route path=\"/user/:userId\" component={LoadableUserPage} />\n          <Route\n            path=\"/:list(news|newest|ask|show|jobs)/:page?\"\n            component={LoadableNewsPage}\n          />\n          <Route component={LoadableNotFoundPage} />\n        </Switch>\n      </React.Suspense>\n    </Container>\n    <Divider />\n    <Container textAlign=\"center\" className=\"Footer\" as=\"footer\">\n      <p>\n        Made with{' '}\n        <span role=\"img\" aria-label=\"Love\">\n          ❤️\n        </span>{' '}\n        by <a href=\"https://cifani.me\">Alessandro Cifani</a>. Source code\n        available on <a href=\"https://github.com/acifani/yahnc\">GitHub</a>.\n      </p>\n    </Container>\n  </>\n)\n\nexport default App\n","import { Component } from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\n\ntype Props = RouteComponentProps<never>\n\nclass ScrollToTop extends Component<Props> {\n  public componentDidUpdate(prevProps: Props) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0)\n    }\n  }\n\n  public render() {\n    return this.props.children\n  }\n}\n\nexport default withRouter(ScrollToTop)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './components/App'\nimport ScrollToTop from './components/ScrollToTop'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\n// @ts-ignore\nReactDOM.createRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <ScrollToTop>\n        <App />\n      </ScrollToTop>\n    </BrowserRouter>\n  </StrictMode>\n)\n\nserviceWorker.register()\n","import React from 'react'\n\ntype Props = {\n  domain: string\n}\n\nconst DomainLink: React.FC<Props> = ({ domain }) => (\n  <a href={`http://${domain}`} target=\"_blank\" rel=\"noopener noreferrer\">\n    {' '}\n    {domain}\n  </a>\n)\n\nexport default DomainLink\n","import React from 'react'\n\ntype Props = {\n  fallback: React.ReactNode\n}\n\nexport default class ErrorBoundary extends React.Component<Props> {\n  state = { hasError: false, error: null }\n\n  static getDerivedStateFromError(error: any) {\n    return {\n      error,\n      hasError: true,\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback\n    }\n\n    return this.props.children\n  }\n}\n","import React from 'react'\nimport { Message } from 'semantic-ui-react'\n\ntype Props = {\n  error: string\n}\n\nexport default ({ error }: Props) => <Message error={true}>{error}</Message>\n","import React from 'react'\nimport { Loader, Placeholder, Card } from 'semantic-ui-react'\n\ntype Props = {\n  message?: string\n}\n\nexport default ({ message }: Props) => (\n  <Loader active={true} inline=\"centered\">\n    {message || 'Loading'}\n  </Loader>\n)\n\nexport function PostSkeleton() {\n  return (\n    <Placeholder>\n      <Placeholder.Header>\n        <Placeholder.Line />\n      </Placeholder.Header>\n      <Placeholder.Paragraph>\n        <Placeholder.Line />\n      </Placeholder.Paragraph>\n    </Placeholder>\n  )\n}\n\nexport function CommentSkeleton() {\n  return (\n    <Placeholder>\n      <Placeholder.Header image>\n        <Placeholder.Line />\n        <Placeholder.Line />\n      </Placeholder.Header>\n      <Placeholder.Paragraph>\n        <Placeholder.Line />\n        <Placeholder.Line />\n      </Placeholder.Paragraph>\n    </Placeholder>\n  )\n}\n\nexport function UserSkeleton() {\n  return (\n    <>\n      <Card>\n        <Placeholder>\n          <Placeholder.Image square />\n        </Placeholder>\n        <Card.Content>\n          <Placeholder>\n            <Placeholder.Header>\n              <Placeholder.Line />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n              <Placeholder.Line length=\"medium\" />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        </Card.Content>\n        <Card.Content extra>\n          <Placeholder>\n            <Placeholder.Header>\n              <Placeholder.Line length=\"short\" />\n            </Placeholder.Header>\n          </Placeholder>\n        </Card.Content>\n      </Card>\n      <Placeholder fluid>\n        <Placeholder.Paragraph>\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n          <Placeholder.Line />\n        </Placeholder.Paragraph>\n      </Placeholder>\n    </>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { News } from '../News/NewsListRow'\n\ntype Props = {\n  news: News\n}\n\nconst loadCommentsPage = () => import(/* webpackPrefetch: true */ '../Comments')\n\nconst NewsLink: React.FC<Props> = ({ news }) => {\n  if (news.url && news.url.startsWith('http')) {\n    return <a href={news.url}>{news.title}</a>\n  } else {\n    return (\n      <Link to={`/comments/${news.id}`} onMouseOver={loadCommentsPage}>\n        {news.title}\n      </Link>\n    )\n  }\n}\n\nexport default NewsLink\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\ntype Props = {\n  user: string\n}\n\nconst loadUserPage = () => import(/* webpackPrefetch: true */ '../User')\n\nconst UserLink: React.FC<Props> = ({ user }) => (\n  <Link to={`/user/${user}`} onMouseOver={loadUserPage}>\n    {' '}\n    {user}\n  </Link>\n)\n\nexport default UserLink\n"],"sourceRoot":""}